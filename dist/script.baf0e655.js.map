{"version":3,"sources":["src/script.js"],"names":["Vue","config","devtools","controllerComponent","template","data","newInput","bpm_value","computed","newInput_toNumber","parseInt","bpm_value_toNumber","methods","addLayer","$emit","updateBPM","playAll","stopAll","keyComponent","props","state","default","required","isPlaying","toggleActive","watch","layerComponent","components","my_clock","my_beat_duration","total_duration","num_beats","next","stop","clearInterval","play","setInterval","playNote","synth","triggerAttackRelease","sequencerComponent","bpm","playing","layers","bar_duration","num_beats_input","push","bpm_input","idx","$refs","layers_refs","app","el","Tone","PolySynth","toDestination"],"mappings":"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","file":"script.baf0e655.js","sourceRoot":"..","sourcesContent":["/** TODO\n * 1. check dynamic update of bpm --UPDATE NON NE VENGO A CAPO\n * 2. check if slider visualization now works --FOLDATO NON è IMPORTANTE PER IL MOMENTO\n * 3. manage shapes\n */\n\n\nVue.config.devtools = true\n\nlet controllerComponent = {\n    template:'\\\n        <div class=\"controller-container\">\\\n            <input class=\"text-input\" type=\"number\" v-model=\"newInput\" placeholder=\"Add a layer (press enter)\" @keyup.enter=\"addLayer\">\\\n            <input class=\"text-input\" type=\"number\" v-model=\"bpm_value\" placeholder=\"Select bpm (press enter)\" @keyup.enter=\"updateBPM\">\\\n            <button class=\"btn-1\" @click=\"playAll\">Play all</button>\\\n            <button class=\"btn-1\" @click=\"stopAll\">Stop</button>\\\n        </div>\\\n    ',\n    data() {\n        return {\n            newInput: '',\n            bpm_value: '',\n        }\n\n    },\n\n    computed: {\n        newInput_toNumber() {\n            return this.newInput ? parseInt(this.newInput) : null\n        },\n        bpm_value_toNumber() {\n            return this.bpm_value ? parseInt(this.bpm_value) : null\n        }\n    },\n\n    methods: {\n        addLayer() {\n            this.$emit('newLayerEvent', this.newInput_toNumber)\n        },\n        updateBPM() {\n            this.$emit('bpmEvent', this.bpm_value_toNumber)\n        },\n        playAll() {\n            this.$emit('playAllEvent')\n        },\n        stopAll() {\n            this.$emit('stopAllEvent')\n        },\n    }\n};\n\nlet keyComponent = {\n\n    template:'\\\n        <div>\\\n        <div class=\"key\" :class=\"{active : state}\" \\\n        @click=\"toggleActive\"></div>\\\n        </div>\\\n    ',\n    \n    props: {\n        state: {\n            default: false,\n            required: true,\n        },\n        isPlaying: {\n            default: false,\n            required: true,\n        },\n    },\n\n    methods: {\n        toggleActive() {\n            this.state = !this.state\n            if(this.state){\n                this.$emit('playSound')\n            }\n        }\n    },\n    watch: {\n        'isPlaying': function(){\n            if(this.state && this.isPlaying){\n                this.$emit('playSound')\n            }\n        }\n    }\n}\n\nlet layerComponent = {\n\n    template:'\\\n        <div>\\\n            <key-component v-for=\"k in num_beats\" @playSound=\"playNote\"\\\n            class=\"keyback\" :class=\"{playing :k === isPlaying + 1}\"></key-component>\\\n            <button class=\"ctrl-btn\" @click=\"$emit(\\'remove\\')\">Remove layer</button>\\\n        </div>\\\n    ',\n    \n    components: {\n        'key-component' : keyComponent\n    },\n    \n    props : ['num_beats','total_duration','system_playing'],\n    \n    data() {\n        return {\n            isPlaying: 0,\n            my_clock: '',\n        }\n    },\n    \n    computed: {\n        my_beat_duration() {\n            return this.total_duration/this.num_beats;\n        }\n    },\n\n    methods: {\n        next() {\n            this.isPlaying = (this.isPlaying + 1) % (this.num_beats);\n        },\n        stop() {\n            clearInterval(this.my_clock)\n        },\n        play() {\n            this.stop();\n            this.my_clock = setInterval(this.next,this.my_beat_duration)\n        },\n        playNote(){\n            synth.triggerAttackRelease(\"A4\",\"16n\")\n        },\n    }\n};\n\nlet sequencerComponent = {\n    \n    template: '\\\n        <div>\\\n            <div class=\"view-box\">\\\n                <p id=\"bpm-viewer\">BPM: {{bpm}}</p>\\\n            </div>\\\n            <controller-component\\\n                @newLayerEvent=\"addLayer\"\\\n                @bpmEvent=\"updateBPM\"\\\n                @playAllEvent=\"playAll\"\\\n                @stopAllEvent=\"stopAll\"\\\n            ></controller-component>\\\n            <layer-component class=\"layer\" v-for=\"(layer,index) in layers\"\\\n                ref=\"layers_refs\"\\\n                :num_beats=\"layer.num_beats\"\\\n                :total_duration=\"bar_duration\"\\\n                :system_playing=\"playing\"\\\n                @remove=\"layers.splice(index,1)\">\\\n            </layer-component>\\\n        </div>\\\n    ',\n    \n    components: {\n        'layer-component' : layerComponent,\n        'controller-component' : controllerComponent,\n    },\n    \n    data(){\n        return {\n            bpm: 60,\n            playing: false,\n            layers: [\n                {\n                    num_beats: 4\n                },\n                {\n                    num_beats: 5\n                },\n            ]\n        }\n    },\n\n    computed: {\n        bar_duration() {\n            if(this.layers[0]){\n                return this.layers[0].num_beats*60000/this.bpm\n            }\n        }\n    },\n\n    methods: {\n        addLayer(num_beats_input) {\n            this.layers.push({num_beats: num_beats_input})\n        },\n        /** errors when bpm is updated while playing */\n        updateBPM(bpm_input) {\n            /** assign new bpm value */\n            this.bpm = bpm_input\n        },\n        /** l'uso di $ref non è dinamico, quindi se aggiungo layer quando sto suonando l'ultimo layer non parte */\n        playAll() {\n            /** first reset all layers */\n            for(idx in this.layers) {\n                this.$refs.layers_refs[idx].isPlaying = 0\n            }\n            /** then restart */\n            this.playing = true\n            for(idx in this.layers) {\n                this.$refs.layers_refs[idx].play()\n            }\n        },\n        stopAll() {\n            for(idx in this.layers) {\n                this.$refs.layers_refs[idx].stop()\n            }\n            this.playing = false\n        },\n    }\n}\n\nvar app = new Vue({\n    el:'#app',\n    components: {\n        'sequencer-component': sequencerComponent\n    }\n})\n\nvar synth = new Tone.PolySynth().toDestination();"]}