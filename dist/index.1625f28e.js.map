{"mappings":"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","sources":["src/script.js"],"sourcesContent":["/** TODO\n * 1. check dynamic update of bpm --UPDATE NON NE VENGO A CAPO\n * 2. check if slider visualization now works --FOLDATO NON Ã¨ IMPORTANTE PER IL MOMENTO\n * 3. manage shapes --UPDATE riusciamo a bindare una width diversa per ogni layer\n */\n\n Vue.config.devtools = true\n\n let controllerComponent = {\n     template:'\\\n         <div class=\"controller-container\">\\\n             <input class=\"text-input\" type=\"number\" v-model=\"newInput\" placeholder=\"Add a layer (press enter)\" @keyup.enter=\"addLayer\">\\\n             <input class=\"text-input\" type=\"number\" v-model=\"bpm_value\" placeholder=\"Select bpm (press enter)\" @keyup.enter=\"updateBPM\">\\\n             <button class=\"btn-1\" @click=\"playAll\">Play all</button>\\\n             <button class=\"btn-1\" @click=\"stopAll\">Stop</button>\\\n             <button class=\"btn-1\" @click=\"inst1Selection\">inst1</button>\\\n             <button class=\"btn-1\" @click=\"inst2Selection\">inst2</button>\\\n         </div>\\\n     ',\n     data() {\n         return {\n             newInput: '',\n             bpm_value: '',\n         }\n \n     },\n \n     computed: {\n         newInput_toNumber() {\n             return this.newInput ? parseInt(this.newInput) : null\n         },\n         bpm_value_toNumber() {\n             return this.bpm_value ? parseInt(this.bpm_value) : null\n         }\n     },\n \n     methods: {\n         addLayer() {\n             this.$emit('newLayerEvent', this.newInput_toNumber)\n         },\n         updateBPM() {\n             this.$emit('bpmEvent', this.bpm_value_toNumber)\n         },\n         playAll() {\n             this.$emit('playAllEvent')\n         },\n         stopAll() {\n             this.$emit('stopAllEvent')\n         },\n         inst1Selection() {\n            inst_id=1\n            this.$emit('instSelectionEvent', inst_id)\n        },\n        inst2Selection() {\n            inst_id=2\n            this.$emit('instSelectionEvent',inst_id)\n        },\n     }\n };\n \n let keyComponent = {\n \n     template:'\\\n         <div>\\\n            <div class=\"key\"\\\n            :class=\"{active1 : state1, active2 : state2, active12 : state1 && state2}\"\\\n            @click=\"toggleActive\">\\\n            </div>\\\n         </div>\\\n     ',\n \n     props: {\n         state1: {\n             default: false,\n             required: true,\n         },\n         state2: {\n            default: false,\n            required: true,\n        },\n         isPlaying: {\n             type: Number,\n         },\n         id: {\n             type: Number,\n         },\n         myLayerId: {\n             type: Number,\n         },\n         inst_selection:{\n             type: Number,\n         }\n     },\n \n     methods: {\n         toggleActive() {\n             switch(this.inst_selection){\n                case 1: this.state1 = !this.state1\n                        if(this.state1){\n                        this.$emit('playSound1Event')\n                        }break;\n                case 2: this.state2 = !this.state2\n                        if(this.state2){\n                        this.$emit('playSound2Event')\n                        }break; \n             }\n         }\n     },\n     watch: {\n         'isPlaying': function(){\n             if(this.state1 && this.isPlaying == this.id){\n                 this.$emit('playSound1Event')\n             }\n             if(this.state2 && this.isPlaying == this.id){\n                this.$emit('playSound2Event')\n            }\n         }\n     }\n }\n \n let layerComponent = {\n \n     template:'\\\n        <div>\\\n            <key-component v-for=\"k in num_beats\"\\\n                class=\"keyback\" :style=\"cssVars\"\\\n                :class=\"{playing : k === isPlaying + 1}\"\\\n                :myLayerId=\"layerId\"\\\n                :numKeys=\"num_beats\"\\\n                :id=\"k-1\"\\\n                :isPlaying=\"isPlaying\"\\\n                :inst_selection=\"inst_id\"\\\n                @playSound1Event=\"playInst1\"\\\n                @playSound2Event=\"playInst2\">\\\n            </key-component>\\\n            <button class=\"ctrl-btn\" @click=\"$emit(\\'remove\\')\">Remove layer</button>\\\n        </div>\\\n     ',\n     \n     components: {\n         'key-component' : keyComponent\n     },\n     \n  \n    props : ['layerId','num_beats','total_duration','system_playing','inst_id'],\n    \n    data() {\n        return {\n            isPlaying: 0,\n            my_clock: '',\n            margin: 5,\n            inst_selection: 1,\n        }\n    },\n    \n    computed: {\n        my_beat_duration() {\n            return this.total_duration/this.num_beats;\n        },\n        layer_width() { \n            return document.getElementById('app').offsetWidth - 24\n        }, /* - layer margin nÃ© app border */\n        //layer_width() { return this.$el.offsetWidth}, /* non funziona cosÃ¬ */\n        cssVars() {\n            return {\n                '--margin': this.margin + 'px',\n                '--keyWidth': (this.layer_width - this.num_beats*2*this.margin)/this.num_beats + 'px'\n                }\n        }\n    },\n\n    methods: {\n        next() {\n            this.isPlaying = (this.isPlaying + 1) % (this.num_beats);\n        },\n        stop() {\n            clearInterval(this.my_clock)\n        },\n        play() {\n            this.stop();\n            this.my_clock = setInterval(this.next,this.my_beat_duration)\n        },\n        playInst1(){\n            synth.triggerAttackRelease(\"A4\",\"16n\")\n        },\n        playInst2(){\n            synth.triggerAttackRelease(\"D4\",\"16n\")\n        },\n    }\n};\n\nlet sequencerComponent = {\n    \n    template: '\\\n        <div>\\\n            <div class=\"view-box\">\\\n                <p id=\"bpm-viewer\">BPM: {{bpm}}</p>\\\n            </div>\\\n            <controller-component\\\n                @newLayerEvent=\"addLayer\"\\\n                @bpmEvent=\"updateBPM\"\\\n                @playAllEvent=\"playAll\"\\\n                @stopAllEvent=\"stopAll\"\\\n                @instSelectionEvent=\"instSelection\"\\\n            ></controller-component>\\\n            <layer-component class=\"layer\" v-for=\"(layer,index) in layers\"\\\n                ref=\"layers_refs\"\\\n                :layerId=\"layer.id\"\\\n                :num_beats=\"layer.num_beats\"\\\n                :total_duration=\"bar_duration\"\\\n                :system_playing=\"playing\"\\\n                :inst_id=\"inst_id\"\\\n                @remove=\"layers.splice(index,1)\">\\\n            </layer-component>\\\n        </div>\\\n    ',\n    \n    components: {\n        'layer-component' : layerComponent,\n        'controller-component' : controllerComponent,\n    },\n    \n    data(){\n        return {\n            bpm: 120,\n            playing: false,\n            nextId: 2,\n            layers: [\n                {\n                    id: 0,\n                    num_beats: 3\n                },\n                {\n                    id: 1,\n                    num_beats: 2\n                },\n            ],\n            inst_id: 1,\n        }\n    },\n\n    computed: {\n        bar_duration() {\n            if(this.layers[0]){\n                return this.layers[0].num_beats*60000/this.bpm\n            }\n        }\n    },\n\n    methods: {\n        addLayer(num_beats_input) {\n            this.layers.push(\n                {   \n                    id: this.nextId,\n                    num_beats: num_beats_input\n                }\n            )\n            this.nextId += 1\n        },\n        /** errors when bpm is updated while playing */\n        updateBPM(bpm_input) {\n            /** assign new bpm value */\n            this.bpm = bpm_input\n        },\n        /** l'uso di $ref non Ã¨ dinamico, quindi se aggiungo layer quando sto suonando l'ultimo layer non parte */\n        playAll() {\n            /** first reset all layers */\n            for(idx in this.layers) {\n                this.$refs.layers_refs[idx].isPlaying = 0\n            }\n            /** then restart */\n            this.playing = true\n            for(idx in this.layers) {\n                this.$refs.layers_refs[idx].play()\n            }\n        },\n        stopAll() {\n            for(idx in this.layers) {\n                this.$refs.layers_refs[idx].stop()\n            }\n            this.playing = false\n        },\n        instSelection(inst_id) {\n            this.inst_id=inst_id\n        },\n    }\n}\n\nvar app = new Vue({\n    el:'#app',\n    components: {\n        'sequencer-component': sequencerComponent\n    }\n})\n\nvar synth = new Tone.PolySynth().toDestination();"],"names":[],"version":3,"file":"index.1625f28e.js.map","sourceRoot":"/__parcel_source_root/"}